<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Anwenderdokumentation 2 ss11-g07</title>
  <style type="text/css">
    body {
    width: 800;
    margin: 0 auto;
    }
  </style>
</head>

<body>

<div align="Center">
<h3><a name="Benutzer_Doku"></a><strong>Anwenderdokumentation zum Projekt Nr. 2 der Gruppe 7 (ss11-g07)</strong></h3>
<i>Tutor: Steffen Bauereiss</i><br/>
</div>
<ul>
<li>
  <a href="#kurzbeschreibung">Kurzbeschreibung</a>
</li>
<li>
  <a href="#beispiel">Beispiel</a>
</li>
<li>
  <a href="#abhaengigkeiten">Abhängigkeiten</a>
</li>
<li>
  <a href="#kompilieren">Kompilieren</a>
</li>
<li>
  <a href="#eingabe">Eingabe</a>
</li>
<li>
  <a href="#ausgabe">Ausgabe</a>
</li>
</ul>
<br/><br/>

<hr width="100%" size="1">
<h4><a name="kurzbeschreibung">Kurzbeschreibung</a></h4><p>
Das vorliegende Programm ist eine Implementierung der Funktion DGBMV, welche Matrix-Vektor-Operationen nach einer der folgenden Formeln durchführt:<br/><br/>
<code>Y := ALPHA * A * X + BETA * Y<br/>
Y := ALPHA * A' * X + BETA * Y</code><br/><br/>
ALPHA, BETA seien Skalare; X, Y seien Vektoren; A sei eine Matrix; A' sei transponiertes A.
</p>
<p>
DGBMV stellt eine fundamentale Operation aus der linearen Algebra dar, die zur Softwarebibliothek der Basic Linear Algebra Subprograms (BLAS) gehört. Die in dieser Bibliothek enthaltenen Unterprogramme führen essentielle, universelle Operationen aus, die beim Programmieren häufig benötigt werden, weshalb sie in einer Vielzahl von Programmiersprachen implementiert werden. DGBMV gehört zu den Level-2-BLAS-Routinen.
</p>
<p>
Die Funktion <code>DGBMV</code> benötigt neben den bereits genannten Parametern noch <code>M</code>, <code>N</code>, <code>KL</code> und <code>KU</code> (die Zeilen- bzw. Spaltenanzahl sowie die Anzahl der Sub- bzw. Superdiagonalen in der normalen Speicherform von A), <code>LDA</code> (die Zeilenanzahl der Bandspeicherform von A, in der die Eingabe <code>A</code> vorliegt), <code>INCX</code> und <code>INCY</code> (die den regelmäßigen Abstand der Elemente (das Inkrement) der Vektoren X und Y in den inkrementierten Arrays <code>X</code> und <code>Y</code> enthalten) und <code>TRANS</code> (eine Variable, die angibt, ob die Matrix A so wie sie ist, transponiert oder auch adjungiert (conjugated) verwendet wird; die Funktionalität, die Matrix zu adjungieren, ist jedoch in der vorliegenden Implementierung nicht gegeben).
</p>
<p>
Die einzige Ausgabe ist das modifizierte Array <code>Y</code>.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="beispiel">Beispiel</a></h4><p>
Die Funktionsweise von <code>DGBMV( TRANS, M, N, KL, KU, ALPHA, A, LDA, X, INCX, BETA, Y, INCY )</code> wird im Folgenden anhand eines Beispieles verdeutlicht:
</p>
<p>
<code>
TRANS = 'N'<br/>
M = N = 6<br/>
KL = 1<br/>
KU = 3<br/>
ALPHA = 7<br/>
A = (000936|001893|073958|264855|823740)<br/>
LDA = 5<br/>
X = (1,0,0,2,0,0,3,0,0,4,0,0,5,0,0,6)<br/>
INCX = 3<br/>
BETA = 4<br/>
Y = (9,0,8,0,7,0,6,0,5,0,4)<br/>
INCY = -2
</code>
</p>
<p>
Zur Vorbereitung müssen die Vektoren X und Y aus ihren Arrays X und Y extrahiert werden, indem nur jedes INCX-te bzw. INCY-te Element in ein neues Vektorarray übertragen wird. Im Fall von X ist es jedes dritte Element, wobei immer mit dem nullten begonnen wird:
<code><pre>
                0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
               (1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6)
</pre></code>
Es werden nur diejenigen mit durch drei ganzzahlig teilbaren Indizes ausgewählt:
<code><pre>
                0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15
               (1,       2,       3,       4,       5,       6)     =>     X = (1,2,3,4,5,6)
</pre></code>
Bei negativem Inkrement wird von Hinten angefangen:
<code><pre>
                10 9  8  7  6  5  4  3  2  1  0
               (9, 0, 8, 0, 7, 0, 6, 0, 5, 0, 4)

                10    8     6     4     2     0
               (9,    8,    7,    6,    5,    4)                    =>     Y = (4,5,6,7,8,9)
</pre></code>
</p>
<p>
Danach kann das Produkt Y' = BETA * Y sowie A_ = ALPHA * A berechnet werden:
<code><pre>
               Y' = (4,5,6,7,8,9) * 4 = (16,20,24,28,32,36)
               A_ =  0.0  0.0  0.0 63.0 21.0 42.0
                     0.0  0.0  7.0 56.0 63.0 21.0
                     0.0 49.0 21.0 63.0 35.0 56.0
                    14.0 42.0 28.0 56.0 35.0 35.0
                    56.0 14.0 21.0 49.0 28.0  0.0
</pre></code>
</p>
<p>
Als kompliziertester Schritt folgt die eigentliche Matrix-Vektor-Multiplikation AAX = A_ * X nach der Formel aus der <a href="../Spezifikation/spezifikation2.htm#Alternative2">Spezifikation 2</a>:
<code><pre>
               AAX = 385.0 532.0 931.0 588.0 707.0 350.0
</pre></code>
</p>
<p>
Zum Schluss wird AAX auf Y' zu Y'' addiert:
<code><pre>
               Y'' = 401.0 552.0 955.0 616.0 739.0 386.0
</pre></code>
</p>
<p>
Alle genannten Schritte können mit dem Skript <a href="dokumentation-DGBMV-beispiel.py">dokumentation-DGBMV-beispiel.py</a> durchgerechnet werden.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="abhaengigkeiten">Abhängigkeiten</a></h4><p>
  Um das Programm <code>dgbmv</code> benutzen zu können, benötigt man folgende Software:
<ul>
  <li>GNU Compiler Collection (gcc) - Version 4.5.2;</li>
  <li>The Netwide Assembler (nasm) - Version 2.09.04;</li>
  <li>Embedded GNU C Library (libc6) - Version 2.13;</li>
  <li>GNU Make (make) - Version 3.81 (Optional).</li>
</ul>
  Als Referenzplattform dient eine aktuelle Linux Distribution (Ubuntu 11.04 x86-64) mit der o. g. Software sowie den entsprechenden 32-Bit-Libraries.<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="kompilieren">Kompilieren</a></h4><p>
  Automatisch (mit make): Im Verzeichnis der Implementierung existiert ein <code>Makefile</code>, welches benutzt werden kann, um das Programm zu kompilieren. Gibt man in einem Terminal im Implementierungsverzeichnis den Befehl <code>make</code> ein, so das Programm automatisch kompiliert.<br/><br/>

  Manuell: Ist <code>make</code> nicht vorhanden, so kann das Programm manuell kompiliert werden. Dazu müssen in einem Terminal im Implementierungsverzeichnis folgende Befehle eingegeben werden:<br/>

<ul>
  <li><code>nasm -f elf32 -g -F dwarf -o dgbmv.o dgbmv.asm</code></li>
  <li><code>gcc -Wall -g -m32 -O0 -o dgbmv dgbmv.o main.c</code></li>
</ul>

  Der erste Befehl übersetzt dabei den eigentlichen Assembler-Code der Funktion DGBMV (<code>dgbmv.asm</code>) in Objektcode, der zweite Befehl übersetzt das Wrapper-Programm (<code>main.c</code>) und linkt es mit dem aus der Assembler-Datei erzeugten Objektcode zu einer ausführbaren Datei (<code>dgbmv</code>).</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="eingabe">Eingabe</a></h4><p>
  Sollen die Eingabeparameter des Programms verändert werden, so kann diese Änderung im Wrapper-Programm (<code>main.c</code>) vorgenommen werden.<br/>
  Direkt zu Beginn der main-Funktion gib es den Kommentar: <code>/* define INPUT parameters here */</code><br/>
  Ab dieser Stelle sind alle Eingabeparameter mit ihren aktuellen Werten aufgelistet. Die Werte können dort nach belieben verändert werden.<br/><br/>
  Nach einer Änderung muss das Programm neu kompiliert und ausgeführt werden, damit es das Ergebnis berechnen kann.</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="ausgabe">Ausgabe</a></h4><p>
  Nachdem das Programm erfolgreich kompiliert wurde, existiert im Implementierungsverzeichnis die ausführbare Datei <code>dgbmv</code>.<br/>
  Sie kann in einem Terminal im Implementierungsverzeichnis mit folgendem Befehl ausgeführt werden:<br/><br/>
<code>./dgbmv</code><br/><br/>

  Das Programm gibt seine Eingabeparameter und das Ergebnis (Y) dann nach folgendem beispielhaften Schema aus:
<code><pre>********************************************************************************
*                                    DGBMV                                     *
********************************************************************************
INPUT Parameters:
TRANS: T
M    : 9
N    : 9
KL   : 1
KU   : 3
ALPHA: 2.000000
A    : (   -0.000000,     0.000000,     0.000000,     1.400000,     2.500000,     3.600000,     6.500000,    -4.300000,     3.200000,    -0.000000, 
           -0.000000,     1.300000,     2.400000,    -3.500000,     4.600000,     6.500000,     4.200000,    -0.000000,     0.000000,     1.200000, 
           12.300000,    -3.400000,     4.500000,    -1.600000,     7.700000,    -5.100000,     9.800000,    -1.100000,     2.200000,   -13.300000, 
            4.400000,     5.500000,    -9.600000,    -1.800000,     0.000000,     3.600000,     2.100000,     3.200000,     4.300000,     5.100000, 
            6.500000,     4.130000,    -0.000000,     5.100000,     0.000000,     1.100000,     2.200000,     3.300000,    -4.400000,    55.500000
        )
LDA  : 5
X    : (    1.000000,     0.000000,     2.000000,     0.000000,     3.000000,     0.000000,     4.000000,     0.000000,     5.000000,     0.000000, 
            6.000000,     0.000000,     7.000000,     0.000000,     8.000000,     0.000000,     9.000000,     0.000000,     1.100000,     2.200000, 
            3.300000,     4.400000,     5.500000,     6.600000)
INCX : 2
BETA : -3.000000
Y    : (   -1.000000,     0.000000,    -4.000000,     0.000000,    15.000000,     0.000000,   -19.300000,     0.000000,     0.000000,     0.000000, 
           -3.000000,     0.000000,     3.500000,     0.000000,     5.100000,     0.000000,    -7.100000,     0.000000,     0.000000,     3.000000, 
            2.300000,     3.200000)
INCY : 2

OUTPUT Result:
Y    : (    9.400000,     0.000000,    90.200000,     0.000000,   113.000000,     0.000000,    42.920000,     0.000000,   184.200000,     0.000000, 
           36.800000,     0.000000,   249.500000,     0.000000,   -15.300000,     0.000000,    21.300000,     0.000000,     0.000000,     3.000000, 
            2.300000,     3.200000)
</pre></code></p>
</body>
</html>
