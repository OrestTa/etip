<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Spezifikation ss11-g07</title>
</head>
<body>
<div align="Center">
<h3><a name="Spezifikation"></a><strong>Spezifikation zum Projekt Nr. 2 der Gruppe 7 (ss11-g07)</strong></h3>
<i>Tutor: Steffen Bauereiss</i><br>
</div>

<ul>

<li><a href="#Kurzbeschreibung">Kurzbeschreibung</a></li>
<li><a href="#Alternative1">Alternative 1</a></li>
<li><a href="#Alternative2">Alternative 2</a></li>
<li><a href="#Bewertung">Bewertung der Alternativen</a></li>
<li><a href="#Entscheidung">Implementierungsentscheidung</a></li>
</ul>
<br>

<hr width="100%" size="1">
<h4><a name="Kurzbeschreibung">Kurzbeschreibung</a></h4>
<p>
Es ist ein System zu realisieren, das eine Binärzahl mit 17 Stellen in eine BCD-Zahl mit 5 x 4 Stellen konvertiert. Der Definitionsbereich liegt zwischen 0 und 99999. Die VHDL-Entity des Systems folgt.<br/><br/>
<code>
entity BINBCD is<br/>
<br/>
port(<br/>
&nbsp;&nbsp;&nbsp;&nbsp;bin_input : in std_logic_vector (16 downto 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;einer, zehner, hunderter, tausender, zehntausender : out std_logic_vector (3 downto 0);<br/>
&nbsp;&nbsp;&nbsp;&nbsp;overflow : out std_logic<br/>
);<br/>
<br/>
end BINBCD;
</code>
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Alternative1">Alternative 1: Double-Dabble Algorithmus</a></h4>
<p>
Diese Alternative sieht es vor, dass die Eingabe zuerst (mit Hilfe einer binären Konstanten: 11000011010011111<sub>2</sub> = 99999<sub>10</sub>) auf ihre Gültigkeit überprüft wird. Falls die Eingabe im Definitionsbereich liegt, so wird ein 37-Bit-Vektor erstellt, der wie folgt aufgebaut ist (beginnend mit dem höchstwertigsten Bit, MSB):<br/>
<code>4-Bit BCD Zehntausender, 4-Bit BCD Tausender, 4-Bit BCD Hunderter, 4-Bit BCD Zehner, 4-Bit BCD Einer, 17-Bit binäre Eingabe.</code>
Danach wird nach folgendem Schema vorgegangen, um die binäre Eingabe (in den 17 niedigstwertigen Bits des Vektors) in eine BCD Zahl umzuwandeln:
<ol>
<li>Schiebe den Vektor um ein Bit nach links.</li>
<li>Wenn der Binäre Wert in einer der BCD Spalten größer oder gleich 5 ist, addiere den Wert 3 zu dieser Spalte.</li>
<li>Wiederhole dieses Schema ab Punkt 1.</li>
</ol>
Nach 17x schieben ist Zahl im BCD Format an den (4-Bit) Stellen der Zehntausender, Tausender, Hunderter, Zehner und Einser.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Alternative2">Alternative 2: Bin-Dec-BCD Algorithmus</a></h4>
<p>
Diese Alternative sieht es vor, dass die Eingabe zuerst (mit Hilfe einer binären Konstanten: 11000011010011111<sub>2</sub> = 99999<sub>10</sub>) auf ihre Gültigkeit überprüft wird. Liegt die Eingabe im Definitionsbereich, wird sie nach folgendem Schema in eine dezimale Zahl umgewandelt (beginnend mit dem niedrigstwertige Bit, LSB):
<ol>
<li>Initialisiere eine Variable "dec" mit 0. Diese wird am Ende die dezimale Zahl enthalten.</li>
<li>Multipliziere die Wertigkeit der aktuellen Stelle (2<sup>0</sup>, 2<sup>1</sup>, ..., 2<sup>16</sup>) mit der Ziffer der aktuellen Stelle (1,0).</li>
<li>Addiere das Produkt aus Schritt 2 zu dec.</li>
<li>Wiederhole dieses Schema (ab Schritt 2) für alle Stellen der Binären Eingabe (17x).</li>
</ol>
Nun, da die Eingabe in dezimaler Form vorliegt, wird jede der (max. 5) Stellen mit Hilfe einer Lookup-Tabelle, welche die Werte von 0-9 je in Dezimal und Binär enthält, in Binär an den entsprechenden Ausgang gelegt.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Bewertung">Bewertung der Alternativen</a></h4>
<p>
Die Alternative 1 (A1) scheint effizienter zu sein, da hier nur Schiebe und Additions Operationen benötigt werden, wogegen Alternative 2 (A2) Additions und Multiplikations Operationen benötigt. Die Multiplikation würde die Hardware unnötig komplex machen.<br/>
Weiterhin wird die Eingabe bei A2 zwei mal in ein anderes Zahlensystem umgerechnet, was unnötige Rechenschritte darstellt. Bei A1 kann die binäre Eingabe innerhalb einer Schleife, welche über den Vektor läuft, berechnet werden.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Entscheidung">Implementierungsentscheidung</a></h4>
<p>
Wir haben uns für den Double-Dabble Algorithmus aus Alternative 1 entschieden, da die oben genannten Vorteile der Alternative 1 überwiegen.
</p>

</body>
</html>

