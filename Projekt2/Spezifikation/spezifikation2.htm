<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Spezifikation 2 ss11-g07</title>
</head>
<body>
<div align="Center">
<h3><a name="Spezifikation"></a><strong>Spezifikation zum Projekt Nr. 2 der Gruppe 7 (ss11-g07)</strong></h3>
<i>Tutor: Steffen Bauereiss</i><br>
</div>

<ul>

<li><a href="#Kurzbeschreibung">Kurzbeschreibung</a></li>
<li><a href="#Alternative1">Alternative 1</a></li>
<li><a href="#Alternative2">Alternative 2</a></li>
<li><a href="#Bewertung">Bewertung der Alternativen</a></li>
<li><a href="#Entscheidung">Implementierungsentscheidung</a></li>
</ul>
<br>

<hr width="100%" size="1">
<h4><a name="Kurzbeschreibung">Kurzbeschreibung</a></h4>
<p>
Es ist eine Funktion DGBMV zu entwickeln, welche Matrix-Vektor-Operationen in Abhängigkeit von TRANS durchführt. Wenn TRANS='N' oder 'n', wird die folgende Formel verwendet:<br/><br/>
<code>Y := ALPHA * A * X + BETA * Y</code>.<br/><br/>
Wenn TRANS='T' oder 't' oder 'C' oder 'c', wird die folgende Formel verwendet:<br/><br/>
<code>Y := ALPHA * A' * X + BETA * Y</code>.<br/><br/>
ALPHA, BETA seien Skalare; X, Y seien Vektoren; A sei eine Matrix; A' sei transponiertes A.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Alternative1">Alternative 1: Berechnung in Normalform</a></h4>
<p>
A, X und Y werden jeweils in A2, X2 und Y2 gesichert. Die Matrix A in Bandspeicherform wird (mit Hilfe des invertierten Subprogramms aus der Aufgabenstellung) in eine MxN-Bandmatrix in Normalform umgewandelt und in A gespeichert. Die Vektoren werden jeweils aus den inkrementierten Arrays X bzw. Y (mit Hilfe der Variablen INCX bzw. INCY) extrahiert und in X bzw. Y gespeichert.<br/><br/>
Dann wird nach folgendem Schema vorgegangen:<br/>

<ul>
<li>Wenn TRANS='T' oder 't' oder 'C' oder 'c', transponiere die Matrix A (transponierte Matrix<sup>1</sup>) und speichere das Ergebnis in A.</li>
<li>Multipliziere (Skalarmultiplikation<sup>2</sup>) die Matrix A mit dem Skalar ALPHA und speichere das Ergebnis in AA.</li>
<li>Multipliziere (Skalarmultiplikation<sup>3</sup>) den Vektor Y mit dem Skalar BETA und speichere das Ergebnis in YB.</li>
<li>Multipliziere (Matrix-Vektor-Multiplikation<sup>4</sup>) die Matrix AA mit dem Vektor X und speichere das Ergebnis in AAX.</li>
<li>Addiere (Vektoraddition<sup>5</sup>) die Vektoren AAX und YB und speichere das Ergebnis in AAXYB.</li>
<li>Setze den Vektor AAXYB in Y2 entsprechend INCY ein und gebe es als inkrementiertes Array Y zurück.<sup> </sup>
<li>Überschreibe A mit A2 und X mit X2.<sup> </sup></li></li>
</ul>
<br/>

<sup>1</sup> transponierte Matrix:<br/>
[A]<sub>ji</sub> wird überschrieben mit [A]<sub>ij</sub>
<br/><br/>
<sup>2</sup> Skalarmultiplikation:<br/>
AA: aa<sub>ij</sub> = (a<sub>ij</sub> &middot; ALPHA) <sub>i=1..M; j=1..N</sub>
<br/><br/>
<sup>3</sup> Skalarmultiplikation:<br/>
YB: yb<sub>i</sub> = (y<sub>i</sub> &middot; BETA) <sub>i=1..n</sub>
<br/><br/>
<sup>4</sup> Matrix-Vektor-Multiplikation:<br/>
<table><tr>
<td>AAX: aax<sub>i</sub> = </td><td><sub>&nbsp;N</sub><br/><font size="+3">&sum;</font><br/><sup>k=1</sup></td><td>(a<sub>ik</sub> &middot; x<sub>k</sub>) <sub>i=1..M</sub></td>
</tr></table>
<br/>
<sup>5</sup> Vektoraddition:<br/>
AAXYB: aaxyb<sub>i</sub> = (aax<sub>i</sub> + yb<sub>i</sub>) <sub>i=1..N</sub>
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Alternative2">Alternative 2: Berechnung in Bandspeicherform</a></h4>
<p>
A, X und Y werden jeweils in A2, X2 und Y2 gesichert. Die Vektoren werden jeweils aus den inkrementierten Arrays X bzw. Y (mit Hilfe der Variablen INCX bzw. INCY) extrahiert und in X bzw. Y gespeichert.<br/><br/>
Dann wird nach folgendem Schema vorgegangen:<br/>

<ul>
<li>Wenn TRANS='T' oder 't' oder 'C' oder 'c', transponiere die Matrix A in Bandspeicherform (transponierte Matrix in Bandspeicherform<sup>1</sup>) und speichere das Ergebnis in A.</li>
<li>Multipliziere (Skalarmultiplikation<sup>2</sup>) die Matrix A mit dem Skalar ALPHA und speichere das Ergebnis in AA.</li>
<li>Multipliziere (Skalarmultiplikation<sup>3</sup>) den Vektor Y mit dem Skalar BETA und speichere das Ergebnis in YB.</li>
<li>Multipliziere (Bandmatrix-Vektor-Multiplikation<sup>4</sup>) die Matrix AA mit dem Vektor X und speichere das Ergebnis in AAX.</li>
<li>Addiere (Vektoraddition<sup>5</sup>) die Vektoren AAX und YB und speichere das Ergebnis in AAXYB.</li>
<li>Setze den Vektor AAXYB in Y2 entsprechend INCY ein und gebe es als inkrementiertes Array Y zurück.<sup> </sup>
<li>Überschreibe A mit A2 und X mit X2.<sup> </sup></li></li>
</ul>
<br/>

<sup>1</sup> transponierte Matrix in Bandspeicherform:<br/>
Die Zeile KU+1 wird in das neue Array in Zeile KL+1 eingefügt; die Zeilen 1..KU werden jeweils in das neue Array in Zeile KU+KL+1..KL+2 eingefügt, wobei sie erst einmal jeweils so lange nach links geshiftet werden, bis die erste Position der jeweiligen Zeile definiert (referenziert) ist; die Zeilen KU+KL+1..KU+2 werden jeweils in das neue Array in Zeile 1..KL eingefügt, wobei sie erst einmal so lange nach rechts geshiftet werden, bis die letzte Position der jeweiligen Zeile definiert (referenziert) ist. Abschließend wird das alte Array A mit dem neu errechneten überschrieben. <i>Die erste Zeile/Spalte des Arrays sei hier 1, nicht 0.</i>
<br/><br/>
<sup>2</sup> Skalarmultiplikation:<br/>
AA: aa<sub>ij</sub> = (a<sub>ij</sub> &middot; ALPHA) <sub>i=1..M; j=1..N</sub>
<br/><br/>
<sup>3</sup> Skalarmultiplikation:<br/>
YB: yb<sub>i</sub> = (y<sub>i</sub> &middot; BETA) <sub>i=1..n</sub>
<br/><br/>
<sup>4</sup> Bandspeichermatrix-Vektor-Multiplikation:<br/>
<table><tr>
<td>AAX: aax<sub>i</sub> = </td><td><sub>&nbsp;&nbsp;KU+KL+1</sub><br/><font size="+3">&nbsp;&nbsp;&nbsp;&sum;</font><br/><sup>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;k=0</sup></td><td>(x<sub>k+1</sub> &middot; aa<sub>KU+i-k;k+1</sub>) <sub>i=1..N</sub></td>
</tr></table>
<i>Sollte dabei eins der Elemente, auf die zugegriffen wird, sich nicht im Array befinden, so ist es für die Berechnung als gleich 0 zu behandeln.</i> <i>Die erste Zeile/Spalte des Arrays sei hier 1, nicht 0.</i><br/><br/>
Beispielhaftes Schema:<br/>
<img src="ex.jpg"><br/><br/>
Beispielhaftes Python-Skript (s. <a href="../../bandmatrix-vector-mult.py">bandmatrix-vector-mult.py</a>):
<pre><code>
    for i in xrange(1,N+1):
        for k in xrange(0,KU+KL+1+1):
            AAX[i-1] = AAX[i-1] + (X[k+1-1] * AA[KU+i-k-1][k+1-1])
</code></pre>
<br/>
<sup>5</sup> Vektoraddition:<br/>
AAXYB: aaxyb<sub>i</sub> = (aax<sub>i</sub> + yb<sub>i</sub>) <sub>i=1..N</sub>
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Bewertung">Bewertung der Alternativen</a></h4>
<p>
Alternative 1 (A1) ist leichter zu durchschauen, da hier die üblichen Matrix-Vektor-Operationen verwendet werden. Somit kann man im beliebigem Stadium der Berechnung ihren aktuellen Zustand intuitiv nachvollziehen.<br/><br/>
Alternative 2 (A2) ist effizienter, da mit der übergebenen Matrix in Bandspeicherform gerechnet wird. Dies erfordert allerdings eine spezielle und nicht unbedingt intuitive Multiplikations-Operation für Matrizen in Bandspeicherform. Da aber auf die Konversion in Normalform verzichtet werden kann, sinkt die Komplexität der Implementierung und somit auch die Fehleranfälligkeit.<br/><br/>
A2 verfügt also über ein besseres Cacheverhalten, eine kürzere Laufzeit und eine höhere Speichereffizienz, ist aber weniger intuitiv und eventuell schwieriger zu diagnostizieren. A1 ist im Vergleich zu A2 etwas langsamer in der Ausführung und benötigt etwas mehr Speicherplatz, lässt sich dafür aber leicher verstehen und durchschauen.
</p>
<br/>
<br/>
<p>
Alternative 1 (A1) ist leichter zu durchschauen, da hier die üblichen Matrix-Vektor-Operationen verwendet werden. Die geringere Komplexität zieht eine geringere Fehleranfälligkeit bei der Implementierung nach sich.<br/><br/>
Alternative 2 (A2) ist effizienter, da mit der übergebenen Matrix in Bandspeicherform gerechnet wird. Dies erhöht allerdings die Komplexität der Implementierung, da eine spezielle und nicht intuitive Multiplikations-Operation für Matrizen in Bandspeicherform erforderlich ist.<br/><br/>
A2 verfügt also über ein besseres Cacheverhalten, eine kürzere Laufzeit und eine höhere Speichereffizienz, diese Vorteile werden jedoch durch eine weit höhere Komplexität wettgemacht. A1 ist im Vergleich zu A2 etwas langsamer in der Ausführung und benötigt etwas mehr Speicherplatz, lässt sich dafür aber wesentlich leicher verstehen und durchschauen.
</p>
<br/>
<br/>

<hr width="100%" size="1">
<h4><a name="Entscheidung">Implementierungsentscheidung</a></h4>
<p>
Wir haben uns für die Implementierung in Bandspeicherform aus Alternative 2 entschieden, da wir ihre hohe Effizienz und relativ geringe Komplexität der Übersichtlichkeit von A1 vorziehen.
</p>
<br/>
<br/>
<p>
Wir haben uns für die Implementierung in Normalform aus Alternative 1 entschieden, da Übersichtlichkeit und Korrektheit der Berechnung - nicht aber Effizienz - unsere Priorität sind.
</p>
</body>
</html>
