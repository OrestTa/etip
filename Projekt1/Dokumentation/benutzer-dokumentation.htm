<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <meta http-equiv="content-type" content="text/html; charset=utf-8">
  <title>Benutzer Dokumentation 1 ss11-g07</title>
</head>
<body>
<div align="Center">
<h3><a name="Benutzer_Doku"></a><strong>Benutzer Dokumentation zum Projekt Nr. 1 der Gruppe 7 (ss11-g07)</strong></h3>
<i>Tutor: Steffen Bauereiss</i><br>
</div>
<ul>
<li>
  <a href="#abhaengigkeiten">Abhänigkeiten</a>
</li>
<li>
  <a href="#testen">Testen</a>
</li>
<li>
  <a href="#eingabewert_aendern">Eingabewert ändern</a>
</li>
</ul>
<br>

<hr width="100%" size="1">
<h4><a name="abhaengigkeiten">Abhängigkeiten</a></h4><p>
  Um die Schaltung <code>BINBCD</code> testen zu können benötigt man folgende Tools:
<ul>
  <li>GHDL (ghdl) - Version 0.29</li>
  <li>GTKWave Analyzer (gtkwave) - Version 3.3.19</li>
  <li>GNU Make (make) - Version 3.81 (Optional)</li>
</ul>
  Als Referenzplattform dient eine aktuelle Linux Distribution (Ubuntu 11.04) mit den o.g. Tools in den entsprechenden Versionen.</p>
<br>
<br>

<hr width="100%" size="1">
<h4><a name="testen">Testen</a></h4><p>
  <strong>Automatisch (mit make):</strong> Im Verzeichnis der Implementierung gibt es ein <code>Makefile</code>, welches benutzt werden kann um die Schaltung zu testen.<br/>
  Gibt man in einem Terminal, welches sich im Implementierungsverzeichnis befindet den Befehl <code>make</code> ein, so wird die Schaltung automatisch analysiert, simuliert, getestet und das Ergebnis in GTKWave angezeigt.<br/><br/>
  <strong>Manuell:</strong> Ist <code>make</code> nicht vorhanden, so kann die Schaltung manuell getestet werden.<br/>
  Dazu müssen in einem Terminal im Implementierungsverzeichnis folgende Befehle eingegeben werden:<br/>
<ul>
  <li><code>ghdl -a implementierung1.vhd testbench.vhd</code></li>
  <li><code>ghdl -e testbench</code></li>
  <li><code>./testbench --stop-time=20000ms --vcd=testbench.w</code></li>
  <li><code>gtkwave testbench.w</code></li>
</ul>
  Der erste Befehl analysiert dabei die eigentliche VHDL-Schaltung (<code>implementierung1.vhd</code>) und dessen Testbench (<code>testbench.vhd</code>); der zweite Befehl simuliert die zuvor analysierte Schaltung; der dritte Befehl startet einen Testdurchlauf mit einer maximalen Länge von 20s; der vierte Befehl zeigt das Ergebnis dieses Testlaufs in GTKWave an.</p>
<br>
<br>

<hr width="100%" size="1">
<h4><a name="eingabewert_aendern">Eingabewert ändern</a></h4><p>
  Will man den Eingabeparamter der Schaltung verändern, so kann diese Änderung in der Testbench (<code>testbench.vhd</code>) vorgenommen werden.<br/>
  Zu Beginn der Architecture <code>BINBCD_test</code> wird dort der Eingabeparameter <code>bin_input</code> definiert, welcher ein 17-Bit langer std_logic_vector ist.<br/>
  Die 17 Bits dieses Vektors können nach belieben verändert werden, um verschiedene Eingaben zu testen.<br/><br/>
  Nach einer Änderung muss die Schaltung neu analysiert, simuliert, getestet und in GTKWave angezeigt werden, um das Ergebnis anzuzeigen.</p>
</body>
</html>
